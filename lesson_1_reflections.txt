How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Fill in your answer here

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	By having access to the whole history of a file, one can easily compare the last versions with the 
first ones, thus being able to view the progress that was achieved, the errors that were made and the 
solutions that were found on his past. Also, obviously, the coder that alters a file by accident can 
easily change the file to a previous bug-free version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Having a autosave version-control can make a very polluted history of a certain file, which can make 
hard to find a specific previous version. On the other end, if a manually saved version-control is used, 
the user has to be very cautious about saving after every major change, and there is always the danger 
of forgetting to save, for example. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Allowing to save multiple files in one commit can make a version-control more thematic, or more 
functional. For example, if a user has a final version of an app but wants to try some other graphic 
design, he can make a commit, make the needed changes on all the files and then make another commit, 
thus being able to change all files at once returning to the older version if needed. Saving each file
separately can make hard for the user to know what exact files he changed previously from the final 
version to end up on the current version.

How can you use the commands git log and git diff to view the history of files?

	I don't know git log command.

How might using version control make you more confident to make changes that
could break something?

	If something breaks down after making a change, it is easy to turn back to the old version, so it
becames less scarier to try new thing or new changes.

Now that you have your workspace set up, what do you want to try using Git for?

	I would like to try git for version-control, since it is largely used on the industry and it can 
make me improve my coding skills.